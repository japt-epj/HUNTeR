swagger: "2.0"
info:
  description: "HUNTeR API specification"
  version: "1.0"
  title: "HUNTeR Swagger specification"
  termsOfService: "http://swagger.io/terms/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "sinv-56053.edu.hsr.ch"
basePath: "/api"
tags:
- name: "exercise"
  description: "Exercises"
- name: "execution"
  description: "Executions"
- name: "person"
  description: "User interactions"
schemes:
- "https"
paths:
  /exercise:
    post:
      tags:
      - "exercise"
      summary: "Add a new question"
      description: ""
      operationId: "addExercise"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exercise object that will be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewExercise"
      responses:
        405:
          description: "Invalid input"

  /exercise/{id}:
    get:
      tags:
      - "exercise"
      summary: "Get exercise"
      description: "Get exercise by id"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "array"
          items:
            type: "integer"
          description: "exercise id, or multiple comma separated ids"
      responses:
        200:
          description: "Exercises found"
          schema:
            type: array
            items:
              $ref: "#/definitions/NewExercise"

  /exercise/teacher/{id}:
    get:
      tags:
      - "exercise"
      summary: "Get exercise"
      description: "Get exercise by id"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "array"
          items:
            type: "integer"
          description: "exercise id, or multiple comma separated ids"
      responses:
        200:
          description: "Exercises found"
          schema:
            type: array
            items:
              $ref: "#/definitions/NewExercise"

  /person:
    put:
      tags:
      - "person"
      summary: "Update an existing person"
      description: ""
      operationId: "updatePerson"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "person object that needs to be editted in the store"
        required: true
        schema:
          $ref: "#/definitions/UpdatePerson"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "person not found"
        405:
          description: "Validation exception"

  /person/{id}:
    get:
      tags:
      - "person"
      summary: "Get people by ids"
      description: "Get one or more people by their id"
      operationId: "getPersonById"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        required: true
        type: "array"
        items:
          type: "integer"
        description: "Person id, or multiple comma separated ids"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "People found"
          schema:
            type: array
            items:
              $ref: "#/definitions/Person"

  /person/current:
     get:
        tags:
        - "person"
        summary: "Get current person"
        description: ""
        operationId: "getCurrentPerson"
        produces:
        - "application/json"
        responses:
          200:
            description: "Current person found"
            schema:
                $ref: "#/definitions/Person"

  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Register a new person"
      description: ""
      operationId: "registerPerson"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created person object"
        required: true
        schema:
          $ref: "#/definitions/RegPerson"
      responses:
        default:
          description: "Registration of new person successful"

  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Login person"
      description: "Authenticate user"
      operationId: "loginPerson"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User information required to log in"
        required: true
        schema:
          $ref: "#/definitions/AuthPerson"
      responses:
        200:
          description: "Login succesful"
          schema:
            $ref: "#/definitions/JWT"
        400:
          description: "Invalid email/password supplied"

  /auth/entryPoint:
    get:
      tags:
      - "auth"
      summary: "Get destionation based on role"
      description: ""
      operationId: "getEntryPoint"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "X-HUNTeR-Frontend"
        type: "boolean"

      responses:
        200:
          description: "Entry point for HUNTer client provided"
          headers:
            X-HUNTeR-Redirect:
              type: "string"
              description: "Location to redirect to"
        302:
          description: "Entry point for non HUNTeR client provided"

  /quiz:
    post:
      tags:
      - "quiz"
      summary: "Add a new quiz"
      description: ""
      operationId: "addQuiz"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that will be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Quiz"
      responses:
        405:
          description: "Invalid input"

  /quiz/{id}:
    get:
      tags:
      - "quiz"
      summary: "Get quiz"
      description: "Get quiz by id"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        required: true
        type: "array"
        items:
          type: "integer"
        description: "Quiz id, or multiple comma separated ids"
      responses:
        200:
          description: "Quizzes found"
          schema:
            type: array
            items:
              $ref: "#/definitions/Quiz"

  /response:
    post:
      tags:
      - "response"
      summary: "Add a new response to an exercise"
      description: ""
      operationId: "addResponse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Response object that will be added to an exercise"
        required: true
        schema:
          $ref: "#/definitions/Response"
      responses:
        405:
          description: "Invalid input"

  /execution:
    post:
      tags:
      - "execution"
      summary: "Add a new execution"
      description: ""
      operationId: "addExecution"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that will be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewExecution"
      responses:
        405:
          description: "Invalid input"

  /execution/{id}:
    get:
      tags:
      - "execution"
      summary: "Get execution"
      description: "Get execution by id"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "execution id"
      responses:
        200:
          description: "Executions found"
          schema:
            $ref: "#/definitions/Execution"

  /execution/{id}/print:
    get:
      tags:
        - "execution"
      summary: "Print out execution QR codes"
      description: "Print out an execution for distributing way points that can be scanned"
      produces:
      - "application/pdf"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of execution to print"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            type: file
        401:
          description: "Not Found"

  /score/{id}:
    get:
      tags:
      - "score"
      summary: "Gets score for an execution"
      description: ""
      operationId: "getScore"
      produces:
       - "application/json"
      parameters:
      - in: "path"
        name: "id"
        required: true
        type: "integer"
        format: "int64"
        description: "execution id"
      responses:
        200:
          description: "Score found"
          schema:
            $ref: "#/definitions/Score"

  /location/{id}:
    get:
      tags:
      - "location"
      summary: "Get location"
      description: "Get location to next exercise by executionId"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "execution id"
      responses:
        200:
          description: "Locations found"
          schema:
            $ref: "#/definitions/NextExerciseLocation"

  /location:
    get:
      tags:
      - "location"
      summary: "Get locations"
      description: "Get locations to next exercise by executionId"
      produces:
      - "application/json"
      responses:
        200:
          description: "Responses found"
          schema:
            type: array
            items:
              $ref: "#/definitions/NextExerciseLocation"

securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"


definitions:

  Person:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      schools:
        type: "array"
        items:
          type: "object"

  NewAnswer:
    type: "object"
    required:
    - "text"
    - "checked"
    properties:
      answerId:
        type: "integer"
        format: "int64"
      text:
        type: "string"
      checked:
        type: "boolean"

  NewExercise:
    type: "object"
    required:
    - "name"
    - "question"
    - "answertemplates"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "IPv4"
      question:
        type: "string"
        example: "Was sind private IPv4 Ranges, welche für private Netzwerke genutzt werden können"
      answers:
        type: "array"
        items:
          $ref: "#/definitions/NewAnswer"

  Exercise:
    type: "object"
    required:
    - "name"
    - "question"
    - "answertemplates"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "IPv4"
      question:
        type: "string"
        example: "Was sind private IPv4 Ranges, welche für private Netzwerke genutzt werden können"
      answers:
        type: "array"
        items:
          type: "string"
      answerIds:
              type: "array"
              items:
                type: "integer"
                format: "int64"

  NewExecution:
      type: "object"
      required:
        - "startDate"
        - "endDate"
        - "name"
        - "quizId"
      properties:
        id:
          type: "integer"
          format: "int64"
        quizId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        startDate:
          type: "string"
        endDate:
          type: "string"
        participants:
          type: "array"
          items:
            type: "integer"
            format: "int64"

  Execution:
    type: "object"
    required:
    - "startDate"
    - "endDate"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      startDate:
        type: "string"
      endDate:
        type: "string"
      participants:
        type: "array"
        items:
          type: "string"

  Response:
    type: "object"
    required:
    - "exerciseId"
    - "executionId"
    - "answerId"
    properties:
      id:
        type: "integer"
        format: "int64"
      exerciseId:
        type: "integer"
        format: "int64"
      executionId:
        type: "integer"
        format: "int64"
      answerId:
        type: "integer"
        format: "int64"

  Quiz:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      exercises:
        type: "array"
        items:
          $ref: "#/definitions/ExerciseLocation"

  ExerciseLocation:
    type: "object"
    required:
    - "exerciseId"
    - "lat"
    - "lng"
    properties:
      id:
        type: "integer"
        format: "int64"
      quizId:
        type: "integer"
        format: "int64"
        example: 1
      exerciseId:
        type: "integer"
        format: "int64"
        example: 1
      lat:
        type: "number"
        format: "double"
        example: 47.2232274
      lng:
        type: "number"
        format: "double"
        example: 8.8176142

  NextExerciseLocation:
    type: "object"
    properties:
      exerciseTitle:
        type: "string"
      lat:
        type: "number"
        format: "double"
        example: 47.2232274
      lng:
        type: "number"
        format: "double"
        example: 8.8176142

  JWT:
    type: "object"
    required:
    - "token"
    properties:
      token:
        type: "string"
      tokenType:
        type: "string"
      tokenLifetime:
        type: "integer"

  RegPerson:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"

  UpdatePerson:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"

  AuthPerson:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"

  Score:
    type: "object"
    additionalProperties:
      $ref: "#/definitions/ScoreValue"

  ScoreValue:
    type: "object"
    properties:
      participantName:
        type: "string"
      participantScore:
        type: "number"
        format: "double"
      isParticipantMe:
        type: "boolean"


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
