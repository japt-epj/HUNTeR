swagger: "2.0"
info:
  description: "Hunter API specification"
  version: "o.0.1"
  title: "Hunter Swagger specification"
  termsOfService: "http://swagger.io/terms/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "sinv-56053.edu.hsr.ch"
basePath: "/api"
tags:
- name: "exercise"
  description: "Everything concerning excercises"
  externalDocs:
    description: "This should link to our wiki I guess..."
    url: "http://swagger.io"
- name: "execution"
  description: "Everything concerning executions"
  externalDocs:
    description: "Link to Wiki"
    url: "https://github.com/japt-epj/HUNTeR"
- name: "person"
  description: "Operations about person"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
paths:

  /exercise:
    post:
      tags:
      - "exercise"
      summary: "Add a new question"
      description: ""
      operationId: "addExercise"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exercise object that will be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewExercise"
      responses:
        405:
          description: "Invalid input"
      security:
      - auth:
        - "write:exercises"
        - "read:exercises"
    put:
      tags:
      - "exercise"
      summary: "Update an existing exercise"
      description: ""
      operationId: "updateExercise"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exercise object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Exercise"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Exercise not found"
        405:
          description: "Validation exception"
      security:
      - auth:
        - "write:exercises"
        - "read:exercises"
    get:
      tags:
      - "exercise"
      summary: "Get all exercises"
      produces:
      - "application/json"
      responses:
        200:
          description: "All exercises"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Exercise"

  /exercise/{id}:
    get:
      tags:
      - "exercise"
      summary: "Get exercise"
      description: "Get exercise by id"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "exercise id"
      responses:
        200:
          description: "Exercises found"
          schema:
            $ref: "#/definitions/Exercise"
    post:
      tags:
      - "exercise"
      summary: "Updates an exercise with form data"
      description: ""
      operationId: "updateExerciseWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of exercise that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
        405:
          description: "Invalid input"
      security:
      - auth:
        - "write:exercises"
        - "read:exercises"

  /qrCode/{id}:
    get:
      tags:
      - "qrCode"
      summary: "Get QRCode"
      description: "Get QRCode by ID. This can only be done by an logged in person."
      operationId: "getQRCode"
      produces:
      - "image/png"
      parameters:
      - in: "path"
        name: "id"
        required: true
        type: "integer"
        description: "Get QR Code image"
      responses:
        200:
          description: "QRCode in PNG format"
          schema:
            type: string
            format: binary
        404:
          description: "QRCode not found"

  /person:
    post:
      tags:
      - "person"
      summary: "Create person"
      description: "This can only be done by the logged in person."
      operationId: "createperson"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created person object"
        required: true
        schema:
          $ref: "#/definitions/Person"
      responses:
        default:
          description: "successful operation"


    get:
        tags:
        - "person"
        summary: "Get all persons"
        produces:
        - "application/json"
        responses:
          200:
            description: "All persons"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Person"

  /person/login:
    get:
      tags:
      - "person"
      summary: "Logs person into the system"
      description: ""
      operationId: "loginperson"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personname"
        in: "query"
        description: "The person name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the person"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid personname/password supplied"

  /person/logout:
    get:
      tags:
      - "person"
      summary: "Logs out current logged in person session"
      description: ""
      operationId: "logoutperson"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"

  /person/{personname}:
    get:
      tags:
      - "person"
      summary: "Get person by person name"
      description: ""
      operationId: "getpersonByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personname"
        in: "path"
        description: "The name that needs to be fetched. Use person1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Person"
        400:
          description: "Invalid personname supplied"
        404:
          description: "person not found"
    put:
      tags:
      - "person"
      summary: "Updated person"
      description: "This can only be done by the logged in person."
      operationId: "updateperson"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personname"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated person object"
        required: true
        schema:
          $ref: "#/definitions/Person"
      responses:
        400:
          description: "Invalid person supplied"
        404:
          description: "person not found"
    delete:
      tags:
      - "person"
      summary: "Delete person"
      description: "This can only be done by the logged in person."
      operationId: "deleteperson"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personname"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid personname supplied"
        404:
          description: "person not found"

  /quiz:
    post:
      tags:
      - "quiz"
      summary: "Add a new quiz"
      description: ""
      operationId: "addQuiz"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that will be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewQuiz"
      responses:
        405:
          description: "Invalid input"
      security:
      - auth:
        - "write:quizzes"
        - "read:quizzes"
    put:
      tags:
      - "quiz"
      summary: "Update an existing quiz"
      description: ""
      operationId: "updateQuiz"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewQuiz"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Execution not found"
        405:
          description: "Validation exception"
      security:
      - auth:
        - "write:quizzes"
        - "read:quizzes"
    get:
      tags:
      - "quiz"
      summary: "Get all quizzes"
      produces:
      - "application/json"
      responses:
        200:
          description: "All quizzes"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NewQuiz"

  /quiz/{id}:
    get:
      tags:
      - "quiz"
      summary: "Get quiz"
      description: "Get quiz by id"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "quiz id"
      responses:
        200:
          description: "Quizzes found"
          schema:
            $ref: "#/definitions/NewQuiz"
    post:
      tags:
      - "quiz"
      summary: "Updates a quiz with form data"
      description: ""
      operationId: "updateQuizWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of quiz that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
        405:
          description: "Invalid input"
      security:
      - auth:
        - "write:quizzes"
        - "read:quizzes"

  /execution:
    post:
      tags:
      - "execution"
      summary: "Add a new execution"
      description: ""
      operationId: "addExecution"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that will be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewExecution"
      responses:
        405:
          description: "Invalid input"
      security:
      - auth:
        - "write:executions"
        - "read:executions"
    put:
      tags:
      - "execution"
      summary: "Update an existing execution"
      description: ""
      operationId: "updateExecution"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewExecution"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Execution not found"
        405:
          description: "Validation exception"
      security:
      - auth:
        - "write:executions"
        - "read:executions"
    get:
      tags:
      - "execution"
      summary: "Get all executions"
      produces:
      - "application/json"
      responses:
        200:
          description: "All executions"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Execution"

  /execution/{id}:
    get:
      tags:
      - "execution"
      summary: "Get execution"
      description: "Get execution by id"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "execution id"
      responses:
        200:
          description: "Executions found"
          schema:
            $ref: "#/definitions/Execution"
    post:
      tags:
      - "execution"
      summary: "Updates an execution with form data"
      description: ""
      operationId: "updateExecutionWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of execution that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
        405:
          description: "Invalid input"
      security:
      - auth:
        - "write:executions"
        - "read:executions"


securityDefinitions:
  auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:exercises: "modify exercises in your account"
      read:exercises: "read your exercises"
      write:executions: "modify executions in quiz"
      read:executions: "read your executions from a quiz"
      write:quizzes: "modify quizzes in db"
      read:quizzes: "read your quizzes from db"

  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:


  Person:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "person"

  NewAnswer:
    type: "object"
    required:
    - "text"
    - "checked"
    properties:
      text:
        type: "string"
      checked:
        type: "boolean"


  NewExercise:
    type: "object"
    required:
    - "title"
    - "question"
    - "answertemplates"
    properties:
      title:
        type: "string"
        example: "IPv4"
      question:
        type: "string"
        example: "Was sind private IPv4 Ranges, welche für private Netzwerke genutzt werden können"
      answers:
        type: "array"
        items:
          $ref: "#/definitions/NewAnswer"

  Exercise:
    type: "object"
    required:
    - "title"
    - "question"
    - "answertemplates"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "IPv4"
      question:
        type: "string"
        example: "Was sind private IPv4 Ranges, welche für private Netzwerke genutzt werden können"
      answers:
        type: "array"
        items:
          type: "string"


  NewExecution:
      type: "object"
      required:
        - "date"
        - "time"
      properties:
        id:
          type: "integer"
          format: "int64"
        date:
          type: "string"
        time:
          type: "string"
        participants:
          type: "array"
          items:
            $ref: "#/definitions/Person"

  Execution:
    type: "object"
    required:
    - "date"
    - "time"
    properties:
      id:
        type: "integer"
        format: "int64"
      date:
        type: "string"
      time:
        type: "string"
      participants:
        type: "array"
        items:
          type: "string"

  NewQuiz:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      executions:
        type: "array"
        items:
          $ref: "#/definitions/NewExecution"
      exercises:
        type: "array"
        items:
          $ref: "#/definitions/NewExercise"


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"