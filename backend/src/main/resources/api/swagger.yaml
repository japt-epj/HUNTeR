swagger: "2.0"
info:
  description: "Hunter API specification"
  version: "o.0.1"
  title: "Hunter Swagger specification"
  termsOfService: "http://swagger.io/terms/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "sinv-56053.edu.hsr.ch"
basePath: "/api"
tags:
- name: "exercise"
  description: "Everything concerning excercises"
  externalDocs:
    description: "This should link to our wiki I guess..."
    url: "http://swagger.io"
- name: "execution"
  description: "Everything concerning executions"
  externalDocs:
    description: "Link to Wiki"
    url: "https://github.com/japt-epj/HUNTeR"
- name: "person"
  description: "Operations about person"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
paths:

  /exercise:
    post:
      tags:
      - "exercise"
      summary: "Add a new question"
      description: ""
      operationId: "addExercise"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exercise object that will be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewExercise"
      responses:
        405:
          description: "Invalid input"

    put:
      tags:
      - "exercise"
      summary: "Update an existing exercise"
      description: ""
      operationId: "updateExercise"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exercise object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Exercise"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Exercise not found"
        405:
          description: "Validation exception"

  /exercise/{id}:
    get:
      tags:
      - "exercise"
      summary: "Get exercise"
      description: "Get exercise by id"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "array"
          items:
            type: "integer"
          description: "exercise id, or multiple comma separated ids"
      responses:
        200:
          description: "Exercises found"
          schema:
            type: array
            items:
              $ref: "#/definitions/Exercise"
    post:
      tags:
      - "exercise"
      summary: "Updates an exercise with form data"
      description: ""
      operationId: "updateExerciseWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of exercise that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
        405:
          description: "Invalid input"

  /qrCode/{id}:
    get:
      tags:
      - "qrCode"
      summary: "Get QRCode"
      description: "Get QRCode by ID. This can only be done by an logged in person."
      operationId: "getQRCode"
      produces:
      - "image/png"
      parameters:
      - in: "path"
        name: "id"
        required: true
        type: "integer"
        description: "Get QR Code image"
      - in: "query"
        name: "scale"
        required: false
        type: "integer"
        description: "Scaling of generated qr code"
        default: 20
      - in: "query"
        name: "border"
        required: false
        type: "integer"
        description: "Border size relative to qr image"
        default: 2
      responses:
        200:
          description: "QRCode in PNG format"
          schema:
            type: string
            format: binary
        404:
          description: "QRCode not found"

  /person/{id}:
    get:
      tags:
      - "person"
      summary: "Get people by ids"
      description: "Get one or more people by their id"
      operationId: "getPersonById"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        required: true
        type: "array"
        items:
          type: "integer"
        description: "Person id, or multiple comma separated ids"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "People found"
          schema:
            type: array
            items:
              $ref: "#/definitions/Person"
  /person:
   put:
      tags:
      - "person"
      summary: "Update an existing person"
      description: ""
      operationId: "updatePerson"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "person object that needs to be editted in the store"
        required: true
        schema:
          $ref: "#/definitions/RegPerson"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "person not found"
        405:
          description: "Validation exception"


  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Register a new person"
      description: ""
      operationId: "registerPerson"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created person object"
        required: true
        schema:
          $ref: "#/definitions/RegPerson"
      responses:
        default:
          description: "Registration of new person successful"

  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Login person"
      description: "Authenticate user"
      operationId: "loginPerson"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User information required to log in"
        required: true
        schema:
          $ref: "#/definitions/AuthPerson"
      responses:
        200:
          description: "Login succesful"
          schema:
            $ref: "#/definitions/JWT"
        400:
          description: "Invalid email/password supplied"

  /auth/entryPoint:
    get:
      tags:
      - "auth"
      summary: "Get destionation based on role"
      description: ""
      operationId: "getEntryPoint"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "X-HUNTeR-Frontend"
        type: "boolean"

      responses:
        200:
          description: "Entry point for HUNTer client provided"
          headers:
            X-HUNTeR-Redirect:
              type: "string"
              description: "Location to redirect to"
        302:
          description: "Entry point for non HUNTeR client provided"


  /quiz:
    post:
      tags:
      - "quiz"
      summary: "Add a new quiz"
      description: ""
      operationId: "addQuiz"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that will be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewQuiz"
      responses:
        405:
          description: "Invalid input"

    put:
      tags:
      - "quiz"
      summary: "Update an existing quiz"
      description: ""
      operationId: "updateQuiz"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewQuiz"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Execution not found"
        405:
          description: "Validation exception"

  /quiz/{id}:
    get:
      tags:
      - "quiz"
      summary: "Get quiz"
      description: "Get quiz by id"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        required: true
        type: "array"
        items:
          type: "integer"
        description: "Quiz id, or multiple comma separated ids"
      responses:
        200:
          description: "Quizzes found"
          schema:
            type: array
            items:
              $ref: "#/definitions/NewQuiz"
    post:
      tags:
      - "quiz"
      summary: "Updates a quiz with form data"
      description: ""
      operationId: "updateQuizWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of quiz that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
        405:
          description: "Invalid input"

  /execution:
    post:
      tags:
      - "execution"
      summary: "Add a new execution"
      description: ""
      operationId: "addExecution"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that will be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewExecution"
      responses:
        405:
          description: "Invalid input"

    put:
      tags:
      - "execution"
      summary: "Update an existing execution"
      description: ""
      operationId: "updateExecution"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Execution object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/NewExecution"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Execution not found"
        405:
          description: "Validation exception"

    get:
      tags:
      - "execution"
      summary: "Get all executions"
      produces:
      - "application/json"
      responses:
        200:
          description: "All executions"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Execution"

  /execution/{id}:
    get:
      tags:
      - "execution"
      summary: "Get execution"
      description: "Get execution by id"
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "execution id"
      responses:
        200:
          description: "Executions found"
          schema:
            $ref: "#/definitions/Execution"
    post:
      tags:
      - "execution"
      summary: "Updates an execution with form data"
      description: ""
      operationId: "updateExecutionWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of execution that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
        405:
          description: "Invalid input"



securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"

  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:


  Person:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "person"

  NewAnswer:
    type: "object"
    required:
    - "text"
    - "checked"
    properties:
      text:
        type: "string"
      checked:
        type: "boolean"


  NewExercise:
    type: "object"
    required:
    - "name"
    - "question"
    - "answertemplates"
    properties:
      name:
        type: "string"
        example: "IPv4"
      question:
        type: "string"
        example: "Was sind private IPv4 Ranges, welche für private Netzwerke genutzt werden können"
      answers:
        type: "array"
        items:
          $ref: "#/definitions/NewAnswer"

  Exercise:
    type: "object"
    required:
    - "name"
    - "question"
    - "answertemplates"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "IPv4"
      question:
        type: "string"
        example: "Was sind private IPv4 Ranges, welche für private Netzwerke genutzt werden können"
      answers:
        type: "array"
        items:
          type: "string"


  NewExecution:
      type: "object"
      required:
        - "startDate"
        - "endDate"
        - "name"
        - "quizId"
      properties:
        id:
          type: "integer"
          format: "int64"
        quizId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        startDate:
          type: "string"
        endDate:
          type: "string"
        participants:
          type: "array"
          items:
            type: "integer"
            format: "int64"

  Execution:
    type: "object"
    required:
    - "startDate"
    - "endDate"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      startDate:
        type: "string"
      endDate:
        type: "string"
      participants:
        type: "array"
        items:
          type: "string"

  NewQuiz:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      creator:
        type: "integer"
        format: "int64"
      executions:
        type: "array"
        items:
          $ref: "#/definitions/NewExecution"
      exercises:
        type: "array"
        items:
          $ref: "#/definitions/Location"


  Location:
    type: "object"
    required:
    - "exerciseId"
    - "lat"
    - "lng"
    properties:
      id:
        type: "integer"
        format: "int64"
      exerciseId:
        type: "integer"
        format: "int64"
        example: 1
      lat:
        type: "number"
        format: "double"
        example: 47.2232274
      lng:
        type: "number"
        format: "double"
        example: 8.8176142


  JWT:
    type: "object"
    required:
    - "token"
    properties:
      token:
        type: "string"
      tokenType:
        type: "string"

  RegPerson:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"

  AuthPerson:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"



externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"